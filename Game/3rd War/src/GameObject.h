#ifndef _GAMEOBJECT_
#define _GAMEOBJECT_

#include <Ogre.h>

/**
 * Represents a Game Mesh object (without pyisics). Allow an easy api for loading meshes and changing its material.
 */
class GameObject
{
protected:

            /**
             * Allows unique names when generated by default.
             * @return Unique id to apped to Object name.
             */
             static inline unsigned int getMeshNum(){ return ++sm_num;}

public:

            /**
             * Instantiates a GameObject. Instantiation its done by loading mesh.
             * @param SceneMgr Current sceneManager.
             * @param mesh  Mesh to be loaded.
             * @param name  (Optional) Name to be assigned to the mesh.
             */
            GameObject( Ogre::SceneManager *sceneMgr, Ogre::String mesh, std::string name = "");

            /**
             * Instantiates a GameObject. Instantiation its done by loading mesh.
             * @param SceneMgr Current sceneManager.
             * @param mesh  Mesh to be loaded.
             * @param name  (Optional) Name to be assigned to the mesh.
             */
            GameObject( Ogre::SceneManager *sceneMgr, Ogre::Entity *entity,std::string name = "");


            /**
             * Obtains its scene node.
             * @return Object Node pointer.
             */
            inline Ogre::SceneNode* getNode() { return m_node;}



            /**
             * Obtains the entity asociated with this mesh.
             * @return  Entity pointer.
             */
            inline Ogre::Entity* getEntity() { return m_entity;}


            /**
             * Change material asociated to this object.
             * @param material Path to the .material file.
             */
            void setMaterial(Ogre::String material);

            /**
             *  Releases everything.
             */
            ~GameObject();

protected:
Ogre::SceneNode *m_node;
Ogre::Entity    *m_entity;
static unsigned int sm_num;
};
#endif
